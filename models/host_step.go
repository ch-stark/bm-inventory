// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HostStep host step
//
// swagger:model host-step
type HostStep string

const (

	// HostStepStartingInstallation captures enum value "Starting installation"
	HostStepStartingInstallation HostStep = "Starting installation"

	// HostStepStartWaitingForControlPlane captures enum value "Start Waiting for control plane"
	HostStepStartWaitingForControlPlane HostStep = "Start Waiting for control plane"

	// HostStepInstalling captures enum value "Installing"
	HostStepInstalling HostStep = "Installing"

	// HostStepWritingImageToDisk captures enum value "Writing image to disk"
	HostStepWritingImageToDisk HostStep = "Writing image to disk"

	// HostStepFinishWaitingForControlPlane captures enum value "Finish Waiting for control plane"
	HostStepFinishWaitingForControlPlane HostStep = "Finish Waiting for control plane"

	// HostStepRebooting captures enum value "Rebooting"
	HostStepRebooting HostStep = "Rebooting"

	// HostStepJoined captures enum value "Joined"
	HostStepJoined HostStep = "Joined"

	// HostStepDone captures enum value "Done"
	HostStepDone HostStep = "Done"

	// HostStepFailed captures enum value "Failed"
	HostStepFailed HostStep = "Failed"
)

// for schema
var hostStepEnum []interface{}

func init() {
	var res []HostStep
	if err := json.Unmarshal([]byte(`["Starting installation","Start Waiting for control plane","Installing","Writing image to disk","Finish Waiting for control plane","Rebooting","Joined","Done","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostStepEnum = append(hostStepEnum, v)
	}
}

func (m HostStep) validateHostStepEnum(path, location string, value HostStep) error {
	if err := validate.EnumCase(path, location, value, hostStepEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this host step
func (m HostStep) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHostStepEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
